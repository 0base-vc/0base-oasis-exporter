// source: state.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var account_pb = require('./account_pb.js');
goog.object.extend(proto, account_pb);
var delegation_pb = require('./delegation_pb.js');
goog.object.extend(proto, delegation_pb);
var debonding_delegation_pb = require('./debonding_delegation_pb.js');
goog.object.extend(proto, debonding_delegation_pb);
goog.exportSymbol('proto.state.CommissionScheduleRules', null, global);
goog.exportSymbol('proto.state.Consensus', null, global);
goog.exportSymbol('proto.state.ConsensusParams', null, global);
goog.exportSymbol('proto.state.Entity', null, global);
goog.exportSymbol('proto.state.GetByHeightRequest', null, global);
goog.exportSymbol('proto.state.GetByHeightResponse', null, global);
goog.exportSymbol('proto.state.GetStakingByHeightRequest', null, global);
goog.exportSymbol('proto.state.GetStakingByHeightResponse', null, global);
goog.exportSymbol('proto.state.Registry', null, global);
goog.exportSymbol('proto.state.RegistryParameters', null, global);
goog.exportSymbol('proto.state.RewardStep', null, global);
goog.exportSymbol('proto.state.Scheduler', null, global);
goog.exportSymbol('proto.state.SchedulerParams', null, global);
goog.exportSymbol('proto.state.Slash', null, global);
goog.exportSymbol('proto.state.Staking', null, global);
goog.exportSymbol('proto.state.StakingParameters', null, global);
goog.exportSymbol('proto.state.State', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.RegistryParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.RegistryParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.RegistryParameters.displayName = 'proto.state.RegistryParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.Entity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.Entity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.Entity.displayName = 'proto.state.Entity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.Registry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.state.Registry.repeatedFields_, null);
};
goog.inherits(proto.state.Registry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.Registry.displayName = 'proto.state.Registry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.Slash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.Slash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.Slash.displayName = 'proto.state.Slash';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.RewardStep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.RewardStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.RewardStep.displayName = 'proto.state.RewardStep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.CommissionScheduleRules = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.CommissionScheduleRules, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.CommissionScheduleRules.displayName = 'proto.state.CommissionScheduleRules';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.StakingParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.state.StakingParameters.repeatedFields_, null);
};
goog.inherits(proto.state.StakingParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.StakingParameters.displayName = 'proto.state.StakingParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.Staking = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.Staking, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.Staking.displayName = 'proto.state.Staking';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.SchedulerParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.SchedulerParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.SchedulerParams.displayName = 'proto.state.SchedulerParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.Scheduler = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.Scheduler, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.Scheduler.displayName = 'proto.state.Scheduler';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.ConsensusParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.ConsensusParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.ConsensusParams.displayName = 'proto.state.ConsensusParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.Consensus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.Consensus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.Consensus.displayName = 'proto.state.Consensus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.State = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.State, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.State.displayName = 'proto.state.State';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.GetByHeightRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.GetByHeightRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.GetByHeightRequest.displayName = 'proto.state.GetByHeightRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.GetByHeightResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.GetByHeightResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.GetByHeightResponse.displayName = 'proto.state.GetByHeightResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.GetStakingByHeightRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.GetStakingByHeightRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.GetStakingByHeightRequest.displayName = 'proto.state.GetStakingByHeightRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.state.GetStakingByHeightResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.state.GetStakingByHeightResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.state.GetStakingByHeightResponse.displayName = 'proto.state.GetStakingByHeightResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.RegistryParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.state.RegistryParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.RegistryParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.RegistryParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    debugAllowUnroutableAddresses: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    debugallowtestruntimes: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    debugallowentitysignednoderegistration: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    debugbypassstake: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    disableruntimeregistration: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    disablekeymanagerruntimeregistration: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    gascostsMap: (f = msg.getGascostsMap()) ? f.toObject(includeInstance, undefined) : [],
    maxnodeexpiration: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.RegistryParameters}
 */
proto.state.RegistryParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.RegistryParameters;
  return proto.state.RegistryParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.RegistryParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.RegistryParameters}
 */
proto.state.RegistryParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugAllowUnroutableAddresses(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugallowtestruntimes(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugallowentitysignednoderegistration(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugbypassstake(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableruntimeregistration(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisablekeymanagerruntimeregistration(value);
      break;
    case 7:
      var value = msg.getGascostsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "", 0);
         });
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxnodeexpiration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.RegistryParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.RegistryParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.RegistryParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.RegistryParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebugAllowUnroutableAddresses();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDebugallowtestruntimes();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDebugallowentitysignednoderegistration();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDebugbypassstake();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDisableruntimeregistration();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getDisablekeymanagerruntimeregistration();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getGascostsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getMaxnodeexpiration();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional bool debug_allow_unroutable_addresses = 1;
 * @return {boolean}
 */
proto.state.RegistryParameters.prototype.getDebugAllowUnroutableAddresses = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.state.RegistryParameters} returns this
 */
proto.state.RegistryParameters.prototype.setDebugAllowUnroutableAddresses = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool DebugAllowTestRuntimes = 2;
 * @return {boolean}
 */
proto.state.RegistryParameters.prototype.getDebugallowtestruntimes = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.state.RegistryParameters} returns this
 */
proto.state.RegistryParameters.prototype.setDebugallowtestruntimes = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool DebugAllowEntitySignedNodeRegistration = 3;
 * @return {boolean}
 */
proto.state.RegistryParameters.prototype.getDebugallowentitysignednoderegistration = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.state.RegistryParameters} returns this
 */
proto.state.RegistryParameters.prototype.setDebugallowentitysignednoderegistration = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool DebugBypassStake = 4;
 * @return {boolean}
 */
proto.state.RegistryParameters.prototype.getDebugbypassstake = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.state.RegistryParameters} returns this
 */
proto.state.RegistryParameters.prototype.setDebugbypassstake = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool DisableRuntimeRegistration = 5;
 * @return {boolean}
 */
proto.state.RegistryParameters.prototype.getDisableruntimeregistration = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.state.RegistryParameters} returns this
 */
proto.state.RegistryParameters.prototype.setDisableruntimeregistration = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool DisableKeyManagerRuntimeRegistration = 6;
 * @return {boolean}
 */
proto.state.RegistryParameters.prototype.getDisablekeymanagerruntimeregistration = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.state.RegistryParameters} returns this
 */
proto.state.RegistryParameters.prototype.setDisablekeymanagerruntimeregistration = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * map<string, uint64> GasCosts = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.state.RegistryParameters.prototype.getGascostsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.state.RegistryParameters} returns this
 */
proto.state.RegistryParameters.prototype.clearGascostsMap = function() {
  this.getGascostsMap().clear();
  return this;};


/**
 * optional uint64 MaxNodeExpiration = 8;
 * @return {number}
 */
proto.state.RegistryParameters.prototype.getMaxnodeexpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.RegistryParameters} returns this
 */
proto.state.RegistryParameters.prototype.setMaxnodeexpiration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.Entity.prototype.toObject = function(opt_includeInstance) {
  return proto.state.Entity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.Entity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.Entity.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.Entity}
 */
proto.state.Entity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.Entity;
  return proto.state.Entity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.Entity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.Entity}
 */
proto.state.Entity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.Entity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.Entity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.Entity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.Entity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublickey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string PublicKey = 1;
 * @return {string}
 */
proto.state.Entity.prototype.getPublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.state.Entity} returns this
 */
proto.state.Entity.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.state.Registry.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.Registry.prototype.toObject = function(opt_includeInstance) {
  return proto.state.Registry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.Registry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.Registry.toObject = function(includeInstance, msg) {
  var f, obj = {
    parameters: (f = msg.getParameters()) && proto.state.RegistryParameters.toObject(includeInstance, f),
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.state.Entity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.Registry}
 */
proto.state.Registry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.Registry;
  return proto.state.Registry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.Registry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.Registry}
 */
proto.state.Registry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.state.RegistryParameters;
      reader.readMessage(value,proto.state.RegistryParameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    case 2:
      var value = new proto.state.Entity;
      reader.readMessage(value,proto.state.Entity.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.Registry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.Registry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.Registry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.Registry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.state.RegistryParameters.serializeBinaryToWriter
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.state.Entity.serializeBinaryToWriter
    );
  }
};


/**
 * optional RegistryParameters parameters = 1;
 * @return {?proto.state.RegistryParameters}
 */
proto.state.Registry.prototype.getParameters = function() {
  return /** @type{?proto.state.RegistryParameters} */ (
    jspb.Message.getWrapperField(this, proto.state.RegistryParameters, 1));
};


/**
 * @param {?proto.state.RegistryParameters|undefined} value
 * @return {!proto.state.Registry} returns this
*/
proto.state.Registry.prototype.setParameters = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.Registry} returns this
 */
proto.state.Registry.prototype.clearParameters = function() {
  return this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.Registry.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Entity entities = 2;
 * @return {!Array<!proto.state.Entity>}
 */
proto.state.Registry.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.state.Entity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.state.Entity, 2));
};


/**
 * @param {!Array<!proto.state.Entity>} value
 * @return {!proto.state.Registry} returns this
*/
proto.state.Registry.prototype.setEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.state.Entity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.state.Entity}
 */
proto.state.Registry.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.state.Entity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.state.Registry} returns this
 */
proto.state.Registry.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.Slash.prototype.toObject = function(opt_includeInstance) {
  return proto.state.Slash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.Slash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.Slash.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: msg.getAmount_asB64(),
    freezeinterval: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.Slash}
 */
proto.state.Slash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.Slash;
  return proto.state.Slash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.Slash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.Slash}
 */
proto.state.Slash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFreezeinterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.Slash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.Slash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.Slash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.Slash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFreezeinterval();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes Amount = 1;
 * @return {!(string|Uint8Array)}
 */
proto.state.Slash.prototype.getAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Amount = 1;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.state.Slash.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes Amount = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.state.Slash.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.state.Slash} returns this
 */
proto.state.Slash.prototype.setAmount = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 FreezeInterval = 2;
 * @return {number}
 */
proto.state.Slash.prototype.getFreezeinterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.Slash} returns this
 */
proto.state.Slash.prototype.setFreezeinterval = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.RewardStep.prototype.toObject = function(opt_includeInstance) {
  return proto.state.RewardStep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.RewardStep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.RewardStep.toObject = function(includeInstance, msg) {
  var f, obj = {
    until: jspb.Message.getFieldWithDefault(msg, 1, 0),
    scale: msg.getScale_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.RewardStep}
 */
proto.state.RewardStep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.RewardStep;
  return proto.state.RewardStep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.RewardStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.RewardStep}
 */
proto.state.RewardStep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUntil(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.RewardStep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.RewardStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.RewardStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.RewardStep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUntil();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getScale_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 Until = 1;
 * @return {number}
 */
proto.state.RewardStep.prototype.getUntil = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.RewardStep} returns this
 */
proto.state.RewardStep.prototype.setUntil = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes Scale = 2;
 * @return {!(string|Uint8Array)}
 */
proto.state.RewardStep.prototype.getScale = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Scale = 2;
 * This is a type-conversion wrapper around `getScale()`
 * @return {string}
 */
proto.state.RewardStep.prototype.getScale_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScale()));
};


/**
 * optional bytes Scale = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScale()`
 * @return {!Uint8Array}
 */
proto.state.RewardStep.prototype.getScale_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScale()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.state.RewardStep} returns this
 */
proto.state.RewardStep.prototype.setScale = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.CommissionScheduleRules.prototype.toObject = function(opt_includeInstance) {
  return proto.state.CommissionScheduleRules.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.CommissionScheduleRules} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.CommissionScheduleRules.toObject = function(includeInstance, msg) {
  var f, obj = {
    ratechangeinterval: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rateboundlead: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxratesteps: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxboundsteps: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.CommissionScheduleRules}
 */
proto.state.CommissionScheduleRules.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.CommissionScheduleRules;
  return proto.state.CommissionScheduleRules.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.CommissionScheduleRules} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.CommissionScheduleRules}
 */
proto.state.CommissionScheduleRules.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRatechangeinterval(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRateboundlead(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxratesteps(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxboundsteps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.CommissionScheduleRules.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.CommissionScheduleRules.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.CommissionScheduleRules} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.CommissionScheduleRules.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRatechangeinterval();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRateboundlead();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMaxratesteps();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMaxboundsteps();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional uint64 RateChangeInterval = 1;
 * @return {number}
 */
proto.state.CommissionScheduleRules.prototype.getRatechangeinterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.CommissionScheduleRules} returns this
 */
proto.state.CommissionScheduleRules.prototype.setRatechangeinterval = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 RateBoundLead = 2;
 * @return {number}
 */
proto.state.CommissionScheduleRules.prototype.getRateboundlead = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.CommissionScheduleRules} returns this
 */
proto.state.CommissionScheduleRules.prototype.setRateboundlead = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 MaxRateSteps = 3;
 * @return {number}
 */
proto.state.CommissionScheduleRules.prototype.getMaxratesteps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.CommissionScheduleRules} returns this
 */
proto.state.CommissionScheduleRules.prototype.setMaxratesteps = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 MaxBoundSteps = 4;
 * @return {number}
 */
proto.state.CommissionScheduleRules.prototype.getMaxboundsteps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.CommissionScheduleRules} returns this
 */
proto.state.CommissionScheduleRules.prototype.setMaxboundsteps = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.state.StakingParameters.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.StakingParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.state.StakingParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.StakingParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.StakingParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    thresholdsMap: (f = msg.getThresholdsMap()) ? f.toObject(includeInstance, undefined) : [],
    debondinginterval: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rewardscheduleList: jspb.Message.toObjectList(msg.getRewardscheduleList(),
    proto.state.RewardStep.toObject, includeInstance),
    signingrewardthresholdnumerator: jspb.Message.getFieldWithDefault(msg, 4, 0),
    signingrewardthresholddenominator: jspb.Message.getFieldWithDefault(msg, 5, 0),
    commissionschedulerules: (f = msg.getCommissionschedulerules()) && proto.state.CommissionScheduleRules.toObject(includeInstance, f),
    slashingMap: (f = msg.getSlashingMap()) ? f.toObject(includeInstance, proto.state.Slash.toObject) : [],
    gascostsMap: (f = msg.getGascostsMap()) ? f.toObject(includeInstance, undefined) : [],
    mindelegationamount: msg.getMindelegationamount_asB64(),
    disabletransfers: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    disabledelegation: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    undisabletransfersfromMap: (f = msg.getUndisabletransfersfromMap()) ? f.toObject(includeInstance, undefined) : [],
    feesplitweightpropose: msg.getFeesplitweightpropose_asB64(),
    feesplitweightvote: msg.getFeesplitweightvote_asB64(),
    feesplitweightnextpropose: msg.getFeesplitweightnextpropose_asB64(),
    rewardfactorepochsigned: msg.getRewardfactorepochsigned_asB64(),
    rewardfactorblockproposed: msg.getRewardfactorblockproposed_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.StakingParameters}
 */
proto.state.StakingParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.StakingParameters;
  return proto.state.StakingParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.StakingParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.StakingParameters}
 */
proto.state.StakingParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getThresholdsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readBytes, null, 0, "");
         });
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDebondinginterval(value);
      break;
    case 3:
      var value = new proto.state.RewardStep;
      reader.readMessage(value,proto.state.RewardStep.deserializeBinaryFromReader);
      msg.addRewardschedule(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSigningrewardthresholdnumerator(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSigningrewardthresholddenominator(value);
      break;
    case 6:
      var value = new proto.state.CommissionScheduleRules;
      reader.readMessage(value,proto.state.CommissionScheduleRules.deserializeBinaryFromReader);
      msg.setCommissionschedulerules(value);
      break;
    case 7:
      var value = msg.getSlashingMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.state.Slash.deserializeBinaryFromReader, "", new proto.state.Slash());
         });
      break;
    case 8:
      var value = msg.getGascostsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "", 0);
         });
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMindelegationamount(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabletransfers(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisabledelegation(value);
      break;
    case 12:
      var value = msg.getUndisabletransfersfromMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "", false);
         });
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeesplitweightpropose(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeesplitweightvote(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeesplitweightnextpropose(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRewardfactorepochsigned(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRewardfactorblockproposed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.StakingParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.StakingParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.StakingParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.StakingParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThresholdsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getDebondinginterval();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRewardscheduleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.state.RewardStep.serializeBinaryToWriter
    );
  }
  f = message.getSigningrewardthresholdnumerator();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSigningrewardthresholddenominator();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getCommissionschedulerules();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.state.CommissionScheduleRules.serializeBinaryToWriter
    );
  }
  f = message.getSlashingMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.state.Slash.serializeBinaryToWriter);
  }
  f = message.getGascostsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getMindelegationamount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getDisabletransfers();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getDisabledelegation();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getUndisabletransfersfromMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getFeesplitweightpropose_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getFeesplitweightvote_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getFeesplitweightnextpropose_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.getRewardfactorepochsigned_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = message.getRewardfactorblockproposed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      17,
      f
    );
  }
};


/**
 * map<int64, bytes> Thresholds = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!(string|Uint8Array)>}
 */
proto.state.StakingParameters.prototype.getThresholdsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.clearThresholdsMap = function() {
  this.getThresholdsMap().clear();
  return this;};


/**
 * optional uint64 DebondingInterval = 2;
 * @return {number}
 */
proto.state.StakingParameters.prototype.getDebondinginterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.setDebondinginterval = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated RewardStep RewardSchedule = 3;
 * @return {!Array<!proto.state.RewardStep>}
 */
proto.state.StakingParameters.prototype.getRewardscheduleList = function() {
  return /** @type{!Array<!proto.state.RewardStep>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.state.RewardStep, 3));
};


/**
 * @param {!Array<!proto.state.RewardStep>} value
 * @return {!proto.state.StakingParameters} returns this
*/
proto.state.StakingParameters.prototype.setRewardscheduleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.state.RewardStep=} opt_value
 * @param {number=} opt_index
 * @return {!proto.state.RewardStep}
 */
proto.state.StakingParameters.prototype.addRewardschedule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.state.RewardStep, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.clearRewardscheduleList = function() {
  return this.setRewardscheduleList([]);
};


/**
 * optional uint64 SigningRewardThresholdNumerator = 4;
 * @return {number}
 */
proto.state.StakingParameters.prototype.getSigningrewardthresholdnumerator = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.setSigningrewardthresholdnumerator = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 SigningRewardThresholdDenominator = 5;
 * @return {number}
 */
proto.state.StakingParameters.prototype.getSigningrewardthresholddenominator = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.setSigningrewardthresholddenominator = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional CommissionScheduleRules CommissionScheduleRules = 6;
 * @return {?proto.state.CommissionScheduleRules}
 */
proto.state.StakingParameters.prototype.getCommissionschedulerules = function() {
  return /** @type{?proto.state.CommissionScheduleRules} */ (
    jspb.Message.getWrapperField(this, proto.state.CommissionScheduleRules, 6));
};


/**
 * @param {?proto.state.CommissionScheduleRules|undefined} value
 * @return {!proto.state.StakingParameters} returns this
*/
proto.state.StakingParameters.prototype.setCommissionschedulerules = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.clearCommissionschedulerules = function() {
  return this.setCommissionschedulerules(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.StakingParameters.prototype.hasCommissionschedulerules = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * map<string, Slash> Slashing = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.state.Slash>}
 */
proto.state.StakingParameters.prototype.getSlashingMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.state.Slash>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      proto.state.Slash));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.clearSlashingMap = function() {
  this.getSlashingMap().clear();
  return this;};


/**
 * map<string, uint64> GasCosts = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.state.StakingParameters.prototype.getGascostsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.clearGascostsMap = function() {
  this.getGascostsMap().clear();
  return this;};


/**
 * optional bytes MinDelegationAmount = 9;
 * @return {!(string|Uint8Array)}
 */
proto.state.StakingParameters.prototype.getMindelegationamount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes MinDelegationAmount = 9;
 * This is a type-conversion wrapper around `getMindelegationamount()`
 * @return {string}
 */
proto.state.StakingParameters.prototype.getMindelegationamount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMindelegationamount()));
};


/**
 * optional bytes MinDelegationAmount = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMindelegationamount()`
 * @return {!Uint8Array}
 */
proto.state.StakingParameters.prototype.getMindelegationamount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMindelegationamount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.setMindelegationamount = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bool DisableTransfers = 10;
 * @return {boolean}
 */
proto.state.StakingParameters.prototype.getDisabletransfers = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.setDisabletransfers = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool DisableDelegation = 11;
 * @return {boolean}
 */
proto.state.StakingParameters.prototype.getDisabledelegation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.setDisabledelegation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * map<string, bool> UndisableTransfersFrom = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.state.StakingParameters.prototype.getUndisabletransfersfromMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.clearUndisabletransfersfromMap = function() {
  this.getUndisabletransfersfromMap().clear();
  return this;};


/**
 * optional bytes FeeSplitWeightPropose = 13;
 * @return {!(string|Uint8Array)}
 */
proto.state.StakingParameters.prototype.getFeesplitweightpropose = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes FeeSplitWeightPropose = 13;
 * This is a type-conversion wrapper around `getFeesplitweightpropose()`
 * @return {string}
 */
proto.state.StakingParameters.prototype.getFeesplitweightpropose_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeesplitweightpropose()));
};


/**
 * optional bytes FeeSplitWeightPropose = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeesplitweightpropose()`
 * @return {!Uint8Array}
 */
proto.state.StakingParameters.prototype.getFeesplitweightpropose_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeesplitweightpropose()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.setFeesplitweightpropose = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes FeeSplitWeightVote = 14;
 * @return {!(string|Uint8Array)}
 */
proto.state.StakingParameters.prototype.getFeesplitweightvote = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes FeeSplitWeightVote = 14;
 * This is a type-conversion wrapper around `getFeesplitweightvote()`
 * @return {string}
 */
proto.state.StakingParameters.prototype.getFeesplitweightvote_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeesplitweightvote()));
};


/**
 * optional bytes FeeSplitWeightVote = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeesplitweightvote()`
 * @return {!Uint8Array}
 */
proto.state.StakingParameters.prototype.getFeesplitweightvote_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeesplitweightvote()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.setFeesplitweightvote = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional bytes FeeSplitWeightNextPropose = 15;
 * @return {!(string|Uint8Array)}
 */
proto.state.StakingParameters.prototype.getFeesplitweightnextpropose = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes FeeSplitWeightNextPropose = 15;
 * This is a type-conversion wrapper around `getFeesplitweightnextpropose()`
 * @return {string}
 */
proto.state.StakingParameters.prototype.getFeesplitweightnextpropose_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeesplitweightnextpropose()));
};


/**
 * optional bytes FeeSplitWeightNextPropose = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeesplitweightnextpropose()`
 * @return {!Uint8Array}
 */
proto.state.StakingParameters.prototype.getFeesplitweightnextpropose_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeesplitweightnextpropose()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.setFeesplitweightnextpropose = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};


/**
 * optional bytes RewardFactorEpochSigned = 16;
 * @return {!(string|Uint8Array)}
 */
proto.state.StakingParameters.prototype.getRewardfactorepochsigned = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes RewardFactorEpochSigned = 16;
 * This is a type-conversion wrapper around `getRewardfactorepochsigned()`
 * @return {string}
 */
proto.state.StakingParameters.prototype.getRewardfactorepochsigned_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRewardfactorepochsigned()));
};


/**
 * optional bytes RewardFactorEpochSigned = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRewardfactorepochsigned()`
 * @return {!Uint8Array}
 */
proto.state.StakingParameters.prototype.getRewardfactorepochsigned_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRewardfactorepochsigned()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.setRewardfactorepochsigned = function(value) {
  return jspb.Message.setProto3BytesField(this, 16, value);
};


/**
 * optional bytes RewardFactorBlockProposed = 17;
 * @return {!(string|Uint8Array)}
 */
proto.state.StakingParameters.prototype.getRewardfactorblockproposed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes RewardFactorBlockProposed = 17;
 * This is a type-conversion wrapper around `getRewardfactorblockproposed()`
 * @return {string}
 */
proto.state.StakingParameters.prototype.getRewardfactorblockproposed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRewardfactorblockproposed()));
};


/**
 * optional bytes RewardFactorBlockProposed = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRewardfactorblockproposed()`
 * @return {!Uint8Array}
 */
proto.state.StakingParameters.prototype.getRewardfactorblockproposed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRewardfactorblockproposed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.state.StakingParameters} returns this
 */
proto.state.StakingParameters.prototype.setRewardfactorblockproposed = function(value) {
  return jspb.Message.setProto3BytesField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.Staking.prototype.toObject = function(opt_includeInstance) {
  return proto.state.Staking.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.Staking} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.Staking.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalSupply: msg.getTotalSupply_asB64(),
    commonPool: msg.getCommonPool_asB64(),
    parameters: (f = msg.getParameters()) && proto.state.StakingParameters.toObject(includeInstance, f),
    ledgerMap: (f = msg.getLedgerMap()) ? f.toObject(includeInstance, proto.account.Account.toObject) : [],
    delegationsMap: (f = msg.getDelegationsMap()) ? f.toObject(includeInstance, proto.delegation.DelegationEntry.toObject) : [],
    debondingDelegationsMap: (f = msg.getDebondingDelegationsMap()) ? f.toObject(includeInstance, proto.debondingdelegation.DebondingDelegationEntry.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.Staking}
 */
proto.state.Staking.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.Staking;
  return proto.state.Staking.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.Staking} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.Staking}
 */
proto.state.Staking.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTotalSupply(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCommonPool(value);
      break;
    case 3:
      var value = new proto.state.StakingParameters;
      reader.readMessage(value,proto.state.StakingParameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    case 4:
      var value = msg.getLedgerMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.account.Account.deserializeBinaryFromReader, "", new proto.account.Account());
         });
      break;
    case 5:
      var value = msg.getDelegationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.delegation.DelegationEntry.deserializeBinaryFromReader, "", new proto.delegation.DelegationEntry());
         });
      break;
    case 6:
      var value = msg.getDebondingDelegationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.debondingdelegation.DebondingDelegationEntry.deserializeBinaryFromReader, "", new proto.debondingdelegation.DebondingDelegationEntry());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.Staking.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.Staking.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.Staking} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.Staking.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalSupply_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCommonPool_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.state.StakingParameters.serializeBinaryToWriter
    );
  }
  f = message.getLedgerMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.account.Account.serializeBinaryToWriter);
  }
  f = message.getDelegationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.delegation.DelegationEntry.serializeBinaryToWriter);
  }
  f = message.getDebondingDelegationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.debondingdelegation.DebondingDelegationEntry.serializeBinaryToWriter);
  }
};


/**
 * optional bytes total_supply = 1;
 * @return {!(string|Uint8Array)}
 */
proto.state.Staking.prototype.getTotalSupply = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes total_supply = 1;
 * This is a type-conversion wrapper around `getTotalSupply()`
 * @return {string}
 */
proto.state.Staking.prototype.getTotalSupply_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTotalSupply()));
};


/**
 * optional bytes total_supply = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTotalSupply()`
 * @return {!Uint8Array}
 */
proto.state.Staking.prototype.getTotalSupply_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTotalSupply()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.state.Staking} returns this
 */
proto.state.Staking.prototype.setTotalSupply = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes common_pool = 2;
 * @return {!(string|Uint8Array)}
 */
proto.state.Staking.prototype.getCommonPool = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes common_pool = 2;
 * This is a type-conversion wrapper around `getCommonPool()`
 * @return {string}
 */
proto.state.Staking.prototype.getCommonPool_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCommonPool()));
};


/**
 * optional bytes common_pool = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCommonPool()`
 * @return {!Uint8Array}
 */
proto.state.Staking.prototype.getCommonPool_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCommonPool()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.state.Staking} returns this
 */
proto.state.Staking.prototype.setCommonPool = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional StakingParameters parameters = 3;
 * @return {?proto.state.StakingParameters}
 */
proto.state.Staking.prototype.getParameters = function() {
  return /** @type{?proto.state.StakingParameters} */ (
    jspb.Message.getWrapperField(this, proto.state.StakingParameters, 3));
};


/**
 * @param {?proto.state.StakingParameters|undefined} value
 * @return {!proto.state.Staking} returns this
*/
proto.state.Staking.prototype.setParameters = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.Staking} returns this
 */
proto.state.Staking.prototype.clearParameters = function() {
  return this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.Staking.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, account.Account> ledger = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.account.Account>}
 */
proto.state.Staking.prototype.getLedgerMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.account.Account>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.account.Account));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.state.Staking} returns this
 */
proto.state.Staking.prototype.clearLedgerMap = function() {
  this.getLedgerMap().clear();
  return this;};


/**
 * map<string, delegation.DelegationEntry> delegations = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.delegation.DelegationEntry>}
 */
proto.state.Staking.prototype.getDelegationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.delegation.DelegationEntry>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.delegation.DelegationEntry));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.state.Staking} returns this
 */
proto.state.Staking.prototype.clearDelegationsMap = function() {
  this.getDelegationsMap().clear();
  return this;};


/**
 * map<string, debondingdelegation.DebondingDelegationEntry> debonding_delegations = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.debondingdelegation.DebondingDelegationEntry>}
 */
proto.state.Staking.prototype.getDebondingDelegationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.debondingdelegation.DebondingDelegationEntry>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.debondingdelegation.DebondingDelegationEntry));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.state.Staking} returns this
 */
proto.state.Staking.prototype.clearDebondingDelegationsMap = function() {
  this.getDebondingDelegationsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.SchedulerParams.prototype.toObject = function(opt_includeInstance) {
  return proto.state.SchedulerParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.SchedulerParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.SchedulerParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    minvalidators: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxvalidators: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxvalidatorsperentity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    debugbypassstake: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    debugstaticvalidators: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    rewardfactorepochelectionany: msg.getRewardfactorepochelectionany_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.SchedulerParams}
 */
proto.state.SchedulerParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.SchedulerParams;
  return proto.state.SchedulerParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.SchedulerParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.SchedulerParams}
 */
proto.state.SchedulerParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinvalidators(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxvalidators(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxvalidatorsperentity(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugbypassstake(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugstaticvalidators(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRewardfactorepochelectionany(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.SchedulerParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.SchedulerParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.SchedulerParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.SchedulerParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinvalidators();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMaxvalidators();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMaxvalidatorsperentity();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDebugbypassstake();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDebugstaticvalidators();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getRewardfactorepochelectionany_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional int64 MinValidators = 1;
 * @return {number}
 */
proto.state.SchedulerParams.prototype.getMinvalidators = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.SchedulerParams} returns this
 */
proto.state.SchedulerParams.prototype.setMinvalidators = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 MaxValidators = 2;
 * @return {number}
 */
proto.state.SchedulerParams.prototype.getMaxvalidators = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.SchedulerParams} returns this
 */
proto.state.SchedulerParams.prototype.setMaxvalidators = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 MaxValidatorsPerEntity = 3;
 * @return {number}
 */
proto.state.SchedulerParams.prototype.getMaxvalidatorsperentity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.SchedulerParams} returns this
 */
proto.state.SchedulerParams.prototype.setMaxvalidatorsperentity = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool DebugBypassStake = 4;
 * @return {boolean}
 */
proto.state.SchedulerParams.prototype.getDebugbypassstake = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.state.SchedulerParams} returns this
 */
proto.state.SchedulerParams.prototype.setDebugbypassstake = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool DebugStaticValidators = 5;
 * @return {boolean}
 */
proto.state.SchedulerParams.prototype.getDebugstaticvalidators = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.state.SchedulerParams} returns this
 */
proto.state.SchedulerParams.prototype.setDebugstaticvalidators = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bytes RewardFactorEpochElectionAny = 6;
 * @return {!(string|Uint8Array)}
 */
proto.state.SchedulerParams.prototype.getRewardfactorepochelectionany = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes RewardFactorEpochElectionAny = 6;
 * This is a type-conversion wrapper around `getRewardfactorepochelectionany()`
 * @return {string}
 */
proto.state.SchedulerParams.prototype.getRewardfactorepochelectionany_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRewardfactorepochelectionany()));
};


/**
 * optional bytes RewardFactorEpochElectionAny = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRewardfactorepochelectionany()`
 * @return {!Uint8Array}
 */
proto.state.SchedulerParams.prototype.getRewardfactorepochelectionany_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRewardfactorepochelectionany()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.state.SchedulerParams} returns this
 */
proto.state.SchedulerParams.prototype.setRewardfactorepochelectionany = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.Scheduler.prototype.toObject = function(opt_includeInstance) {
  return proto.state.Scheduler.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.Scheduler} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.Scheduler.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: (f = msg.getParams()) && proto.state.SchedulerParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.Scheduler}
 */
proto.state.Scheduler.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.Scheduler;
  return proto.state.Scheduler.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.Scheduler} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.Scheduler}
 */
proto.state.Scheduler.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.state.SchedulerParams;
      reader.readMessage(value,proto.state.SchedulerParams.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.Scheduler.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.Scheduler.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.Scheduler} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.Scheduler.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.state.SchedulerParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional SchedulerParams params = 1;
 * @return {?proto.state.SchedulerParams}
 */
proto.state.Scheduler.prototype.getParams = function() {
  return /** @type{?proto.state.SchedulerParams} */ (
    jspb.Message.getWrapperField(this, proto.state.SchedulerParams, 1));
};


/**
 * @param {?proto.state.SchedulerParams|undefined} value
 * @return {!proto.state.Scheduler} returns this
*/
proto.state.Scheduler.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.Scheduler} returns this
 */
proto.state.Scheduler.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.Scheduler.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.ConsensusParams.prototype.toObject = function(opt_includeInstance) {
  return proto.state.ConsensusParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.ConsensusParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.ConsensusParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeoutcommit: (f = msg.getTimeoutcommit()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    skiptimeoutcommit: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    emptyblockinterval: (f = msg.getEmptyblockinterval()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    maxtxsize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxblocksize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxblockgas: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxevidenceageblocks: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxevidenceagetime: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.ConsensusParams}
 */
proto.state.ConsensusParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.ConsensusParams;
  return proto.state.ConsensusParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.ConsensusParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.ConsensusParams}
 */
proto.state.ConsensusParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setTimeoutcommit(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSkiptimeoutcommit(value);
      break;
    case 3:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setEmptyblockinterval(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxtxsize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxblocksize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxblockgas(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxevidenceageblocks(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxevidenceagetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.ConsensusParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.ConsensusParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.ConsensusParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.ConsensusParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeoutcommit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getSkiptimeoutcommit();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEmptyblockinterval();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getMaxtxsize();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMaxblocksize();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMaxblockgas();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMaxevidenceageblocks();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getMaxevidenceagetime();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional google.protobuf.Duration TimeoutCommit = 1;
 * @return {?proto.google.protobuf.Duration}
 */
proto.state.ConsensusParams.prototype.getTimeoutcommit = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 1));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.state.ConsensusParams} returns this
*/
proto.state.ConsensusParams.prototype.setTimeoutcommit = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.ConsensusParams} returns this
 */
proto.state.ConsensusParams.prototype.clearTimeoutcommit = function() {
  return this.setTimeoutcommit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.ConsensusParams.prototype.hasTimeoutcommit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool SkipTimeoutCommit = 2;
 * @return {boolean}
 */
proto.state.ConsensusParams.prototype.getSkiptimeoutcommit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.state.ConsensusParams} returns this
 */
proto.state.ConsensusParams.prototype.setSkiptimeoutcommit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional google.protobuf.Duration EmptyBlockInterval = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.state.ConsensusParams.prototype.getEmptyblockinterval = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 3));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.state.ConsensusParams} returns this
*/
proto.state.ConsensusParams.prototype.setEmptyblockinterval = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.ConsensusParams} returns this
 */
proto.state.ConsensusParams.prototype.clearEmptyblockinterval = function() {
  return this.setEmptyblockinterval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.ConsensusParams.prototype.hasEmptyblockinterval = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 MaxTxSize = 4;
 * @return {number}
 */
proto.state.ConsensusParams.prototype.getMaxtxsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.ConsensusParams} returns this
 */
proto.state.ConsensusParams.prototype.setMaxtxsize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 MaxBlockSize = 5;
 * @return {number}
 */
proto.state.ConsensusParams.prototype.getMaxblocksize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.ConsensusParams} returns this
 */
proto.state.ConsensusParams.prototype.setMaxblocksize = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 MaxBlockGas = 6;
 * @return {number}
 */
proto.state.ConsensusParams.prototype.getMaxblockgas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.ConsensusParams} returns this
 */
proto.state.ConsensusParams.prototype.setMaxblockgas = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 MaxEvidenceAgeBlocks = 7;
 * @return {number}
 */
proto.state.ConsensusParams.prototype.getMaxevidenceageblocks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.ConsensusParams} returns this
 */
proto.state.ConsensusParams.prototype.setMaxevidenceageblocks = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string MaxEvidenceAgeTime = 8;
 * @return {string}
 */
proto.state.ConsensusParams.prototype.getMaxevidenceagetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.state.ConsensusParams} returns this
 */
proto.state.ConsensusParams.prototype.setMaxevidenceagetime = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.Consensus.prototype.toObject = function(opt_includeInstance) {
  return proto.state.Consensus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.Consensus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.Consensus.toObject = function(includeInstance, msg) {
  var f, obj = {
    backend: jspb.Message.getFieldWithDefault(msg, 1, ""),
    params: (f = msg.getParams()) && proto.state.ConsensusParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.Consensus}
 */
proto.state.Consensus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.Consensus;
  return proto.state.Consensus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.Consensus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.Consensus}
 */
proto.state.Consensus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackend(value);
      break;
    case 2:
      var value = new proto.state.ConsensusParams;
      reader.readMessage(value,proto.state.ConsensusParams.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.Consensus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.Consensus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.Consensus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.Consensus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBackend();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.state.ConsensusParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Backend = 1;
 * @return {string}
 */
proto.state.Consensus.prototype.getBackend = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.state.Consensus} returns this
 */
proto.state.Consensus.prototype.setBackend = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ConsensusParams params = 2;
 * @return {?proto.state.ConsensusParams}
 */
proto.state.Consensus.prototype.getParams = function() {
  return /** @type{?proto.state.ConsensusParams} */ (
    jspb.Message.getWrapperField(this, proto.state.ConsensusParams, 2));
};


/**
 * @param {?proto.state.ConsensusParams|undefined} value
 * @return {!proto.state.Consensus} returns this
*/
proto.state.Consensus.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.Consensus} returns this
 */
proto.state.Consensus.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.Consensus.prototype.hasParams = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.State.prototype.toObject = function(opt_includeInstance) {
  return proto.state.State.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.State} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.State.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    chainid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    registry: (f = msg.getRegistry()) && proto.state.Registry.toObject(includeInstance, f),
    staking: (f = msg.getStaking()) && proto.state.Staking.toObject(includeInstance, f),
    scheduler: (f = msg.getScheduler()) && proto.state.Scheduler.toObject(includeInstance, f),
    consensus: (f = msg.getConsensus()) && proto.state.Consensus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.State}
 */
proto.state.State.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.State;
  return proto.state.State.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.State} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.State}
 */
proto.state.State.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 4:
      var value = new proto.state.Registry;
      reader.readMessage(value,proto.state.Registry.deserializeBinaryFromReader);
      msg.setRegistry(value);
      break;
    case 5:
      var value = new proto.state.Staking;
      reader.readMessage(value,proto.state.Staking.deserializeBinaryFromReader);
      msg.setStaking(value);
      break;
    case 6:
      var value = new proto.state.Scheduler;
      reader.readMessage(value,proto.state.Scheduler.deserializeBinaryFromReader);
      msg.setScheduler(value);
      break;
    case 7:
      var value = new proto.state.Consensus;
      reader.readMessage(value,proto.state.Consensus.deserializeBinaryFromReader);
      msg.setConsensus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.State.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.State.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.State} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.State.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRegistry();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.state.Registry.serializeBinaryToWriter
    );
  }
  f = message.getStaking();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.state.Staking.serializeBinaryToWriter
    );
  }
  f = message.getScheduler();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.state.Scheduler.serializeBinaryToWriter
    );
  }
  f = message.getConsensus();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.state.Consensus.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 Height = 1;
 * @return {number}
 */
proto.state.State.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.State} returns this
 */
proto.state.State.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp Time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.state.State.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.state.State} returns this
*/
proto.state.State.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.State} returns this
 */
proto.state.State.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.State.prototype.hasTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string ChainID = 3;
 * @return {string}
 */
proto.state.State.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.state.State} returns this
 */
proto.state.State.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Registry registry = 4;
 * @return {?proto.state.Registry}
 */
proto.state.State.prototype.getRegistry = function() {
  return /** @type{?proto.state.Registry} */ (
    jspb.Message.getWrapperField(this, proto.state.Registry, 4));
};


/**
 * @param {?proto.state.Registry|undefined} value
 * @return {!proto.state.State} returns this
*/
proto.state.State.prototype.setRegistry = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.State} returns this
 */
proto.state.State.prototype.clearRegistry = function() {
  return this.setRegistry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.State.prototype.hasRegistry = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Staking staking = 5;
 * @return {?proto.state.Staking}
 */
proto.state.State.prototype.getStaking = function() {
  return /** @type{?proto.state.Staking} */ (
    jspb.Message.getWrapperField(this, proto.state.Staking, 5));
};


/**
 * @param {?proto.state.Staking|undefined} value
 * @return {!proto.state.State} returns this
*/
proto.state.State.prototype.setStaking = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.State} returns this
 */
proto.state.State.prototype.clearStaking = function() {
  return this.setStaking(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.State.prototype.hasStaking = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Scheduler scheduler = 6;
 * @return {?proto.state.Scheduler}
 */
proto.state.State.prototype.getScheduler = function() {
  return /** @type{?proto.state.Scheduler} */ (
    jspb.Message.getWrapperField(this, proto.state.Scheduler, 6));
};


/**
 * @param {?proto.state.Scheduler|undefined} value
 * @return {!proto.state.State} returns this
*/
proto.state.State.prototype.setScheduler = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.State} returns this
 */
proto.state.State.prototype.clearScheduler = function() {
  return this.setScheduler(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.State.prototype.hasScheduler = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Consensus consensus = 7;
 * @return {?proto.state.Consensus}
 */
proto.state.State.prototype.getConsensus = function() {
  return /** @type{?proto.state.Consensus} */ (
    jspb.Message.getWrapperField(this, proto.state.Consensus, 7));
};


/**
 * @param {?proto.state.Consensus|undefined} value
 * @return {!proto.state.State} returns this
*/
proto.state.State.prototype.setConsensus = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.State} returns this
 */
proto.state.State.prototype.clearConsensus = function() {
  return this.setConsensus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.State.prototype.hasConsensus = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.GetByHeightRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.state.GetByHeightRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.GetByHeightRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.GetByHeightRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.GetByHeightRequest}
 */
proto.state.GetByHeightRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.GetByHeightRequest;
  return proto.state.GetByHeightRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.GetByHeightRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.GetByHeightRequest}
 */
proto.state.GetByHeightRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.GetByHeightRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.GetByHeightRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.GetByHeightRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.GetByHeightRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.state.GetByHeightRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.GetByHeightRequest} returns this
 */
proto.state.GetByHeightRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.GetByHeightResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.state.GetByHeightResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.GetByHeightResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.GetByHeightResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.state.State.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.GetByHeightResponse}
 */
proto.state.GetByHeightResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.GetByHeightResponse;
  return proto.state.GetByHeightResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.GetByHeightResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.GetByHeightResponse}
 */
proto.state.GetByHeightResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.state.State;
      reader.readMessage(value,proto.state.State.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.GetByHeightResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.GetByHeightResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.GetByHeightResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.GetByHeightResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.state.State.serializeBinaryToWriter
    );
  }
};


/**
 * optional State state = 1;
 * @return {?proto.state.State}
 */
proto.state.GetByHeightResponse.prototype.getState = function() {
  return /** @type{?proto.state.State} */ (
    jspb.Message.getWrapperField(this, proto.state.State, 1));
};


/**
 * @param {?proto.state.State|undefined} value
 * @return {!proto.state.GetByHeightResponse} returns this
*/
proto.state.GetByHeightResponse.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.GetByHeightResponse} returns this
 */
proto.state.GetByHeightResponse.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.GetByHeightResponse.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.GetStakingByHeightRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.state.GetStakingByHeightRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.GetStakingByHeightRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.GetStakingByHeightRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.GetStakingByHeightRequest}
 */
proto.state.GetStakingByHeightRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.GetStakingByHeightRequest;
  return proto.state.GetStakingByHeightRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.GetStakingByHeightRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.GetStakingByHeightRequest}
 */
proto.state.GetStakingByHeightRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.GetStakingByHeightRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.GetStakingByHeightRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.GetStakingByHeightRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.GetStakingByHeightRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 height = 1;
 * @return {number}
 */
proto.state.GetStakingByHeightRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.state.GetStakingByHeightRequest} returns this
 */
proto.state.GetStakingByHeightRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.state.GetStakingByHeightResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.state.GetStakingByHeightResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.state.GetStakingByHeightResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.GetStakingByHeightResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    staking: (f = msg.getStaking()) && proto.state.Staking.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.state.GetStakingByHeightResponse}
 */
proto.state.GetStakingByHeightResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.state.GetStakingByHeightResponse;
  return proto.state.GetStakingByHeightResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.state.GetStakingByHeightResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.state.GetStakingByHeightResponse}
 */
proto.state.GetStakingByHeightResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.state.Staking;
      reader.readMessage(value,proto.state.Staking.deserializeBinaryFromReader);
      msg.setStaking(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.state.GetStakingByHeightResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.state.GetStakingByHeightResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.state.GetStakingByHeightResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.state.GetStakingByHeightResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStaking();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.state.Staking.serializeBinaryToWriter
    );
  }
};


/**
 * optional Staking staking = 1;
 * @return {?proto.state.Staking}
 */
proto.state.GetStakingByHeightResponse.prototype.getStaking = function() {
  return /** @type{?proto.state.Staking} */ (
    jspb.Message.getWrapperField(this, proto.state.Staking, 1));
};


/**
 * @param {?proto.state.Staking|undefined} value
 * @return {!proto.state.GetStakingByHeightResponse} returns this
*/
proto.state.GetStakingByHeightResponse.prototype.setStaking = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.state.GetStakingByHeightResponse} returns this
 */
proto.state.GetStakingByHeightResponse.prototype.clearStaking = function() {
  return this.setStaking(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.state.GetStakingByHeightResponse.prototype.hasStaking = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.state);
