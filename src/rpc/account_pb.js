// source: account.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.account.Account', null, global);
goog.exportSymbol('proto.account.CommissionRateBoundStep', null, global);
goog.exportSymbol('proto.account.CommissionRateStep', null, global);
goog.exportSymbol('proto.account.CommissionSchedule', null, global);
goog.exportSymbol('proto.account.EscrowAccount', null, global);
goog.exportSymbol('proto.account.GeneralAccount', null, global);
goog.exportSymbol('proto.account.GetByAddressRequest', null, global);
goog.exportSymbol('proto.account.GetByAddressResponse', null, global);
goog.exportSymbol('proto.account.SharePool', null, global);
goog.exportSymbol('proto.account.StakeAccumulator', null, global);
goog.exportSymbol('proto.account.StakeThreshold', null, global);
goog.exportSymbol('proto.account.ThresholdKinds', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.GeneralAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.GeneralAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.GeneralAccount.displayName = 'proto.account.GeneralAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.SharePool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.SharePool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.SharePool.displayName = 'proto.account.SharePool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.CommissionRateStep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.CommissionRateStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.CommissionRateStep.displayName = 'proto.account.CommissionRateStep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.CommissionRateBoundStep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.CommissionRateBoundStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.CommissionRateBoundStep.displayName = 'proto.account.CommissionRateBoundStep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.CommissionSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.account.CommissionSchedule.repeatedFields_, null);
};
goog.inherits(proto.account.CommissionSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.CommissionSchedule.displayName = 'proto.account.CommissionSchedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.ThresholdKinds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.account.ThresholdKinds.repeatedFields_, null);
};
goog.inherits(proto.account.ThresholdKinds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.ThresholdKinds.displayName = 'proto.account.ThresholdKinds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.StakeThreshold = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.StakeThreshold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.StakeThreshold.displayName = 'proto.account.StakeThreshold';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.StakeAccumulator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.StakeAccumulator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.StakeAccumulator.displayName = 'proto.account.StakeAccumulator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.EscrowAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.EscrowAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.EscrowAccount.displayName = 'proto.account.EscrowAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.Account.displayName = 'proto.account.Account';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.GetByAddressRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.GetByAddressRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.GetByAddressRequest.displayName = 'proto.account.GetByAddressRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.GetByAddressResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.GetByAddressResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.GetByAddressResponse.displayName = 'proto.account.GetByAddressResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.GeneralAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.account.GeneralAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.GeneralAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.GeneralAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    balance: msg.getBalance_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    transfersnotbefore: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.GeneralAccount}
 */
proto.account.GeneralAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.GeneralAccount;
  return proto.account.GeneralAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.GeneralAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.GeneralAccount}
 */
proto.account.GeneralAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBalance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTransfersnotbefore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.GeneralAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.GeneralAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.GeneralAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.GeneralAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalance_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTransfersnotbefore();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes Balance = 1;
 * @return {!(string|Uint8Array)}
 */
proto.account.GeneralAccount.prototype.getBalance = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Balance = 1;
 * This is a type-conversion wrapper around `getBalance()`
 * @return {string}
 */
proto.account.GeneralAccount.prototype.getBalance_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBalance()));
};


/**
 * optional bytes Balance = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBalance()`
 * @return {!Uint8Array}
 */
proto.account.GeneralAccount.prototype.getBalance_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBalance()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.account.GeneralAccount} returns this
 */
proto.account.GeneralAccount.prototype.setBalance = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 Nonce = 2;
 * @return {number}
 */
proto.account.GeneralAccount.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.GeneralAccount} returns this
 */
proto.account.GeneralAccount.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 TransfersNotBefore = 3;
 * @return {number}
 */
proto.account.GeneralAccount.prototype.getTransfersnotbefore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.GeneralAccount} returns this
 */
proto.account.GeneralAccount.prototype.setTransfersnotbefore = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.SharePool.prototype.toObject = function(opt_includeInstance) {
  return proto.account.SharePool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.SharePool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.SharePool.toObject = function(includeInstance, msg) {
  var f, obj = {
    balance: msg.getBalance_asB64(),
    totalshares: msg.getTotalshares_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.SharePool}
 */
proto.account.SharePool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.SharePool;
  return proto.account.SharePool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.SharePool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.SharePool}
 */
proto.account.SharePool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBalance(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTotalshares(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.SharePool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.SharePool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.SharePool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.SharePool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalance_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTotalshares_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes Balance = 1;
 * @return {!(string|Uint8Array)}
 */
proto.account.SharePool.prototype.getBalance = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Balance = 1;
 * This is a type-conversion wrapper around `getBalance()`
 * @return {string}
 */
proto.account.SharePool.prototype.getBalance_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBalance()));
};


/**
 * optional bytes Balance = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBalance()`
 * @return {!Uint8Array}
 */
proto.account.SharePool.prototype.getBalance_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBalance()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.account.SharePool} returns this
 */
proto.account.SharePool.prototype.setBalance = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes TotalShares = 2;
 * @return {!(string|Uint8Array)}
 */
proto.account.SharePool.prototype.getTotalshares = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes TotalShares = 2;
 * This is a type-conversion wrapper around `getTotalshares()`
 * @return {string}
 */
proto.account.SharePool.prototype.getTotalshares_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTotalshares()));
};


/**
 * optional bytes TotalShares = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTotalshares()`
 * @return {!Uint8Array}
 */
proto.account.SharePool.prototype.getTotalshares_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTotalshares()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.account.SharePool} returns this
 */
proto.account.SharePool.prototype.setTotalshares = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.CommissionRateStep.prototype.toObject = function(opt_includeInstance) {
  return proto.account.CommissionRateStep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.CommissionRateStep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.CommissionRateStep.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rate: msg.getRate_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.CommissionRateStep}
 */
proto.account.CommissionRateStep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.CommissionRateStep;
  return proto.account.CommissionRateStep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.CommissionRateStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.CommissionRateStep}
 */
proto.account.CommissionRateStep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.CommissionRateStep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.CommissionRateStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.CommissionRateStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.CommissionRateStep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 Start = 1;
 * @return {number}
 */
proto.account.CommissionRateStep.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.CommissionRateStep} returns this
 */
proto.account.CommissionRateStep.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes Rate = 2;
 * @return {!(string|Uint8Array)}
 */
proto.account.CommissionRateStep.prototype.getRate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Rate = 2;
 * This is a type-conversion wrapper around `getRate()`
 * @return {string}
 */
proto.account.CommissionRateStep.prototype.getRate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRate()));
};


/**
 * optional bytes Rate = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRate()`
 * @return {!Uint8Array}
 */
proto.account.CommissionRateStep.prototype.getRate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.account.CommissionRateStep} returns this
 */
proto.account.CommissionRateStep.prototype.setRate = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.CommissionRateBoundStep.prototype.toObject = function(opt_includeInstance) {
  return proto.account.CommissionRateBoundStep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.CommissionRateBoundStep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.CommissionRateBoundStep.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ratemin: msg.getRatemin_asB64(),
    ratemax: msg.getRatemax_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.CommissionRateBoundStep}
 */
proto.account.CommissionRateBoundStep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.CommissionRateBoundStep;
  return proto.account.CommissionRateBoundStep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.CommissionRateBoundStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.CommissionRateBoundStep}
 */
proto.account.CommissionRateBoundStep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRatemin(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRatemax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.CommissionRateBoundStep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.CommissionRateBoundStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.CommissionRateBoundStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.CommissionRateBoundStep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRatemin_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getRatemax_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint64 Start = 1;
 * @return {number}
 */
proto.account.CommissionRateBoundStep.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.CommissionRateBoundStep} returns this
 */
proto.account.CommissionRateBoundStep.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes RateMin = 2;
 * @return {!(string|Uint8Array)}
 */
proto.account.CommissionRateBoundStep.prototype.getRatemin = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes RateMin = 2;
 * This is a type-conversion wrapper around `getRatemin()`
 * @return {string}
 */
proto.account.CommissionRateBoundStep.prototype.getRatemin_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRatemin()));
};


/**
 * optional bytes RateMin = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRatemin()`
 * @return {!Uint8Array}
 */
proto.account.CommissionRateBoundStep.prototype.getRatemin_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRatemin()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.account.CommissionRateBoundStep} returns this
 */
proto.account.CommissionRateBoundStep.prototype.setRatemin = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes RateMax = 3;
 * @return {!(string|Uint8Array)}
 */
proto.account.CommissionRateBoundStep.prototype.getRatemax = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes RateMax = 3;
 * This is a type-conversion wrapper around `getRatemax()`
 * @return {string}
 */
proto.account.CommissionRateBoundStep.prototype.getRatemax_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRatemax()));
};


/**
 * optional bytes RateMax = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRatemax()`
 * @return {!Uint8Array}
 */
proto.account.CommissionRateBoundStep.prototype.getRatemax_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRatemax()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.account.CommissionRateBoundStep} returns this
 */
proto.account.CommissionRateBoundStep.prototype.setRatemax = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.account.CommissionSchedule.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.CommissionSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.account.CommissionSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.CommissionSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.CommissionSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    ratesList: jspb.Message.toObjectList(msg.getRatesList(),
    proto.account.CommissionRateStep.toObject, includeInstance),
    boundsList: jspb.Message.toObjectList(msg.getBoundsList(),
    proto.account.CommissionRateBoundStep.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.CommissionSchedule}
 */
proto.account.CommissionSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.CommissionSchedule;
  return proto.account.CommissionSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.CommissionSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.CommissionSchedule}
 */
proto.account.CommissionSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.account.CommissionRateStep;
      reader.readMessage(value,proto.account.CommissionRateStep.deserializeBinaryFromReader);
      msg.addRates(value);
      break;
    case 2:
      var value = new proto.account.CommissionRateBoundStep;
      reader.readMessage(value,proto.account.CommissionRateBoundStep.deserializeBinaryFromReader);
      msg.addBounds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.CommissionSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.CommissionSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.CommissionSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.CommissionSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.account.CommissionRateStep.serializeBinaryToWriter
    );
  }
  f = message.getBoundsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.account.CommissionRateBoundStep.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CommissionRateStep Rates = 1;
 * @return {!Array<!proto.account.CommissionRateStep>}
 */
proto.account.CommissionSchedule.prototype.getRatesList = function() {
  return /** @type{!Array<!proto.account.CommissionRateStep>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.account.CommissionRateStep, 1));
};


/**
 * @param {!Array<!proto.account.CommissionRateStep>} value
 * @return {!proto.account.CommissionSchedule} returns this
*/
proto.account.CommissionSchedule.prototype.setRatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.account.CommissionRateStep=} opt_value
 * @param {number=} opt_index
 * @return {!proto.account.CommissionRateStep}
 */
proto.account.CommissionSchedule.prototype.addRates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.account.CommissionRateStep, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.account.CommissionSchedule} returns this
 */
proto.account.CommissionSchedule.prototype.clearRatesList = function() {
  return this.setRatesList([]);
};


/**
 * repeated CommissionRateBoundStep Bounds = 2;
 * @return {!Array<!proto.account.CommissionRateBoundStep>}
 */
proto.account.CommissionSchedule.prototype.getBoundsList = function() {
  return /** @type{!Array<!proto.account.CommissionRateBoundStep>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.account.CommissionRateBoundStep, 2));
};


/**
 * @param {!Array<!proto.account.CommissionRateBoundStep>} value
 * @return {!proto.account.CommissionSchedule} returns this
*/
proto.account.CommissionSchedule.prototype.setBoundsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.account.CommissionRateBoundStep=} opt_value
 * @param {number=} opt_index
 * @return {!proto.account.CommissionRateBoundStep}
 */
proto.account.CommissionSchedule.prototype.addBounds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.account.CommissionRateBoundStep, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.account.CommissionSchedule} returns this
 */
proto.account.CommissionSchedule.prototype.clearBoundsList = function() {
  return this.setBoundsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.account.ThresholdKinds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.ThresholdKinds.prototype.toObject = function(opt_includeInstance) {
  return proto.account.ThresholdKinds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.ThresholdKinds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.ThresholdKinds.toObject = function(includeInstance, msg) {
  var f, obj = {
    kindsList: jspb.Message.toObjectList(msg.getKindsList(),
    proto.account.StakeThreshold.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.ThresholdKinds}
 */
proto.account.ThresholdKinds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.ThresholdKinds;
  return proto.account.ThresholdKinds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.ThresholdKinds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.ThresholdKinds}
 */
proto.account.ThresholdKinds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.account.StakeThreshold;
      reader.readMessage(value,proto.account.StakeThreshold.deserializeBinaryFromReader);
      msg.addKinds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.ThresholdKinds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.ThresholdKinds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.ThresholdKinds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.ThresholdKinds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKindsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.account.StakeThreshold.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StakeThreshold Kinds = 1;
 * @return {!Array<!proto.account.StakeThreshold>}
 */
proto.account.ThresholdKinds.prototype.getKindsList = function() {
  return /** @type{!Array<!proto.account.StakeThreshold>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.account.StakeThreshold, 1));
};


/**
 * @param {!Array<!proto.account.StakeThreshold>} value
 * @return {!proto.account.ThresholdKinds} returns this
*/
proto.account.ThresholdKinds.prototype.setKindsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.account.StakeThreshold=} opt_value
 * @param {number=} opt_index
 * @return {!proto.account.StakeThreshold}
 */
proto.account.ThresholdKinds.prototype.addKinds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.account.StakeThreshold, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.account.ThresholdKinds} returns this
 */
proto.account.ThresholdKinds.prototype.clearKindsList = function() {
  return this.setKindsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.StakeThreshold.prototype.toObject = function(opt_includeInstance) {
  return proto.account.StakeThreshold.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.StakeThreshold} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.StakeThreshold.toObject = function(includeInstance, msg) {
  var f, obj = {
    global: jspb.Message.getFieldWithDefault(msg, 1, ""),
    constant: msg.getConstant_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.StakeThreshold}
 */
proto.account.StakeThreshold.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.StakeThreshold;
  return proto.account.StakeThreshold.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.StakeThreshold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.StakeThreshold}
 */
proto.account.StakeThreshold.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGlobal(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConstant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.StakeThreshold.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.StakeThreshold.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.StakeThreshold} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.StakeThreshold.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlobal();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConstant_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string Global = 1;
 * @return {string}
 */
proto.account.StakeThreshold.prototype.getGlobal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.StakeThreshold} returns this
 */
proto.account.StakeThreshold.prototype.setGlobal = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes Constant = 2;
 * @return {!(string|Uint8Array)}
 */
proto.account.StakeThreshold.prototype.getConstant = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Constant = 2;
 * This is a type-conversion wrapper around `getConstant()`
 * @return {string}
 */
proto.account.StakeThreshold.prototype.getConstant_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConstant()));
};


/**
 * optional bytes Constant = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConstant()`
 * @return {!Uint8Array}
 */
proto.account.StakeThreshold.prototype.getConstant_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConstant()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.account.StakeThreshold} returns this
 */
proto.account.StakeThreshold.prototype.setConstant = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.StakeAccumulator.prototype.toObject = function(opt_includeInstance) {
  return proto.account.StakeAccumulator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.StakeAccumulator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.StakeAccumulator.toObject = function(includeInstance, msg) {
  var f, obj = {
    claimsMap: (f = msg.getClaimsMap()) ? f.toObject(includeInstance, proto.account.ThresholdKinds.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.StakeAccumulator}
 */
proto.account.StakeAccumulator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.StakeAccumulator;
  return proto.account.StakeAccumulator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.StakeAccumulator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.StakeAccumulator}
 */
proto.account.StakeAccumulator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getClaimsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.account.ThresholdKinds.deserializeBinaryFromReader, "", new proto.account.ThresholdKinds());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.StakeAccumulator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.StakeAccumulator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.StakeAccumulator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.StakeAccumulator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaimsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.account.ThresholdKinds.serializeBinaryToWriter);
  }
};


/**
 * map<string, ThresholdKinds> Claims = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.account.ThresholdKinds>}
 */
proto.account.StakeAccumulator.prototype.getClaimsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.account.ThresholdKinds>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.account.ThresholdKinds));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.account.StakeAccumulator} returns this
 */
proto.account.StakeAccumulator.prototype.clearClaimsMap = function() {
  this.getClaimsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.EscrowAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.account.EscrowAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.EscrowAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.EscrowAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: (f = msg.getActive()) && proto.account.SharePool.toObject(includeInstance, f),
    debonding: (f = msg.getDebonding()) && proto.account.SharePool.toObject(includeInstance, f),
    commissionschedule: (f = msg.getCommissionschedule()) && proto.account.CommissionSchedule.toObject(includeInstance, f),
    stakeaccumulator: (f = msg.getStakeaccumulator()) && proto.account.StakeAccumulator.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.EscrowAccount}
 */
proto.account.EscrowAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.EscrowAccount;
  return proto.account.EscrowAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.EscrowAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.EscrowAccount}
 */
proto.account.EscrowAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.account.SharePool;
      reader.readMessage(value,proto.account.SharePool.deserializeBinaryFromReader);
      msg.setActive(value);
      break;
    case 2:
      var value = new proto.account.SharePool;
      reader.readMessage(value,proto.account.SharePool.deserializeBinaryFromReader);
      msg.setDebonding(value);
      break;
    case 3:
      var value = new proto.account.CommissionSchedule;
      reader.readMessage(value,proto.account.CommissionSchedule.deserializeBinaryFromReader);
      msg.setCommissionschedule(value);
      break;
    case 4:
      var value = new proto.account.StakeAccumulator;
      reader.readMessage(value,proto.account.StakeAccumulator.deserializeBinaryFromReader);
      msg.setStakeaccumulator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.EscrowAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.EscrowAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.EscrowAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.EscrowAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.account.SharePool.serializeBinaryToWriter
    );
  }
  f = message.getDebonding();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.account.SharePool.serializeBinaryToWriter
    );
  }
  f = message.getCommissionschedule();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.account.CommissionSchedule.serializeBinaryToWriter
    );
  }
  f = message.getStakeaccumulator();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.account.StakeAccumulator.serializeBinaryToWriter
    );
  }
};


/**
 * optional SharePool Active = 1;
 * @return {?proto.account.SharePool}
 */
proto.account.EscrowAccount.prototype.getActive = function() {
  return /** @type{?proto.account.SharePool} */ (
    jspb.Message.getWrapperField(this, proto.account.SharePool, 1));
};


/**
 * @param {?proto.account.SharePool|undefined} value
 * @return {!proto.account.EscrowAccount} returns this
*/
proto.account.EscrowAccount.prototype.setActive = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.EscrowAccount} returns this
 */
proto.account.EscrowAccount.prototype.clearActive = function() {
  return this.setActive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.EscrowAccount.prototype.hasActive = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SharePool Debonding = 2;
 * @return {?proto.account.SharePool}
 */
proto.account.EscrowAccount.prototype.getDebonding = function() {
  return /** @type{?proto.account.SharePool} */ (
    jspb.Message.getWrapperField(this, proto.account.SharePool, 2));
};


/**
 * @param {?proto.account.SharePool|undefined} value
 * @return {!proto.account.EscrowAccount} returns this
*/
proto.account.EscrowAccount.prototype.setDebonding = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.EscrowAccount} returns this
 */
proto.account.EscrowAccount.prototype.clearDebonding = function() {
  return this.setDebonding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.EscrowAccount.prototype.hasDebonding = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommissionSchedule CommissionSchedule = 3;
 * @return {?proto.account.CommissionSchedule}
 */
proto.account.EscrowAccount.prototype.getCommissionschedule = function() {
  return /** @type{?proto.account.CommissionSchedule} */ (
    jspb.Message.getWrapperField(this, proto.account.CommissionSchedule, 3));
};


/**
 * @param {?proto.account.CommissionSchedule|undefined} value
 * @return {!proto.account.EscrowAccount} returns this
*/
proto.account.EscrowAccount.prototype.setCommissionschedule = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.EscrowAccount} returns this
 */
proto.account.EscrowAccount.prototype.clearCommissionschedule = function() {
  return this.setCommissionschedule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.EscrowAccount.prototype.hasCommissionschedule = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StakeAccumulator StakeAccumulator = 4;
 * @return {?proto.account.StakeAccumulator}
 */
proto.account.EscrowAccount.prototype.getStakeaccumulator = function() {
  return /** @type{?proto.account.StakeAccumulator} */ (
    jspb.Message.getWrapperField(this, proto.account.StakeAccumulator, 4));
};


/**
 * @param {?proto.account.StakeAccumulator|undefined} value
 * @return {!proto.account.EscrowAccount} returns this
*/
proto.account.EscrowAccount.prototype.setStakeaccumulator = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.EscrowAccount} returns this
 */
proto.account.EscrowAccount.prototype.clearStakeaccumulator = function() {
  return this.setStakeaccumulator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.EscrowAccount.prototype.hasStakeaccumulator = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.account.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    general: (f = msg.getGeneral()) && proto.account.GeneralAccount.toObject(includeInstance, f),
    escrow: (f = msg.getEscrow()) && proto.account.EscrowAccount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.Account}
 */
proto.account.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.Account;
  return proto.account.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.Account}
 */
proto.account.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.account.GeneralAccount;
      reader.readMessage(value,proto.account.GeneralAccount.deserializeBinaryFromReader);
      msg.setGeneral(value);
      break;
    case 2:
      var value = new proto.account.EscrowAccount;
      reader.readMessage(value,proto.account.EscrowAccount.deserializeBinaryFromReader);
      msg.setEscrow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeneral();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.account.GeneralAccount.serializeBinaryToWriter
    );
  }
  f = message.getEscrow();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.account.EscrowAccount.serializeBinaryToWriter
    );
  }
};


/**
 * optional GeneralAccount General = 1;
 * @return {?proto.account.GeneralAccount}
 */
proto.account.Account.prototype.getGeneral = function() {
  return /** @type{?proto.account.GeneralAccount} */ (
    jspb.Message.getWrapperField(this, proto.account.GeneralAccount, 1));
};


/**
 * @param {?proto.account.GeneralAccount|undefined} value
 * @return {!proto.account.Account} returns this
*/
proto.account.Account.prototype.setGeneral = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.Account} returns this
 */
proto.account.Account.prototype.clearGeneral = function() {
  return this.setGeneral(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.Account.prototype.hasGeneral = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EscrowAccount Escrow = 2;
 * @return {?proto.account.EscrowAccount}
 */
proto.account.Account.prototype.getEscrow = function() {
  return /** @type{?proto.account.EscrowAccount} */ (
    jspb.Message.getWrapperField(this, proto.account.EscrowAccount, 2));
};


/**
 * @param {?proto.account.EscrowAccount|undefined} value
 * @return {!proto.account.Account} returns this
*/
proto.account.Account.prototype.setEscrow = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.Account} returns this
 */
proto.account.Account.prototype.clearEscrow = function() {
  return this.setEscrow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.Account.prototype.hasEscrow = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.GetByAddressRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.account.GetByAddressRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.GetByAddressRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.GetByAddressRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.GetByAddressRequest}
 */
proto.account.GetByAddressRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.GetByAddressRequest;
  return proto.account.GetByAddressRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.GetByAddressRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.GetByAddressRequest}
 */
proto.account.GetByAddressRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.GetByAddressRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.GetByAddressRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.GetByAddressRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.GetByAddressRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.account.GetByAddressRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.GetByAddressRequest} returns this
 */
proto.account.GetByAddressRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 height = 2;
 * @return {number}
 */
proto.account.GetByAddressRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.GetByAddressRequest} returns this
 */
proto.account.GetByAddressRequest.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.GetByAddressResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.account.GetByAddressResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.GetByAddressResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.GetByAddressResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && proto.account.Account.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.GetByAddressResponse}
 */
proto.account.GetByAddressResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.GetByAddressResponse;
  return proto.account.GetByAddressResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.GetByAddressResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.GetByAddressResponse}
 */
proto.account.GetByAddressResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.account.Account;
      reader.readMessage(value,proto.account.Account.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.GetByAddressResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.GetByAddressResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.GetByAddressResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.GetByAddressResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.account.Account.serializeBinaryToWriter
    );
  }
};


/**
 * optional Account account = 1;
 * @return {?proto.account.Account}
 */
proto.account.GetByAddressResponse.prototype.getAccount = function() {
  return /** @type{?proto.account.Account} */ (
    jspb.Message.getWrapperField(this, proto.account.Account, 1));
};


/**
 * @param {?proto.account.Account|undefined} value
 * @return {!proto.account.GetByAddressResponse} returns this
*/
proto.account.GetByAddressResponse.prototype.setAccount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.GetByAddressResponse} returns this
 */
proto.account.GetByAddressResponse.prototype.clearAccount = function() {
  return this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.GetByAddressResponse.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.account);
